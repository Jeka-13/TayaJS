(()=>{"use strict";var __webpack_modules__={196:()=>{eval("\n;// CONCATENATED MODULE: ./library/core/bootstrap.js\nfunction bootstrap(module) {\n    module.start()\n}\n;// CONCATENATED MODULE: ./library/core/module.js\nclass Module {\n    constructor(config) {\n        this.components = config.components;\n\n    }\n\n    start() {\n        this.initComponents()\n    }\n\n    initComponents() {\n        this.components.forEach(component => component.render())\n    }\n}\n;// CONCATENATED MODULE: ./library/core/component.js\nclass Component {\n    constructor(config) {\n        this.selector = config.selector;\n        this.template = config.template;\n    }\n\n    render() {\n        document.querySelector(this.selector).innerHTML = this.template;\n    }\n}\n;// CONCATENATED MODULE: ./app/app.component.js\n// TO DO\n// Configure webpack for loading HTML by files not by hardcode HTML\n// Or maybe to create special templateUrl and template for two possibilities ?????\n\n\n\n\nclass AppComponent extends Component {\n    constructor(config) {\n        super(config);\n    }\n}\n\nconst appComponent = new AppComponent({\n    selector: 'app-root',\n    template: ` \n        <div> Wow, your shit is working </div> \n    `\n})\n;// CONCATENATED MODULE: ./app/app.module.js\n\n\n\nclass AppModule extends Module {\n    constructor(config) {\n        super(config);\n    }\n}\n\nconst appModule = new AppModule({\n    components: [\n        appComponent\n    ]\n})\n;// CONCATENATED MODULE: ./index.js\n\n\n\nbootstrap(appModule)\n\n\n\n\n//# sourceURL=webpack:///./index.js_+_5_modules?")}},__webpack_exports__={};__webpack_modules__[196]()})();